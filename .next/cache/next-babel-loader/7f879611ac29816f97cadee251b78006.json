{"ast":null,"code":"import shortid from \"shortid\";\nimport { ADD_POST_TO_ME } from \"./user\";\nimport produce from 'immer';\nimport faker from '@withshepherd/faker';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '김진성'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요'\n    }]\n  }],\n  imagePaths: [],\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comment: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '김진성2'\n  },\n  Images: [{\n    src: null\n  }],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '김진성2'\n  }\n}); // reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content)); // 게시글 글 넣어주기\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/src/reducers/post.js"],"names":["shortid","ADD_POST_TO_ME","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","v","i","name","findName","lorem","paragraph","image","Comment","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","post","find","postId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CAAC;AACVC,IAAAA,EAAE,EAAC,CADO;AAEVC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAC,CADC;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFI;AAMVC,IAAAA,OAAO,EAAE,uBANC;AAOVC,IAAAA,MAAM,EAAE,CAAC;AACPJ,MAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADG;AAEPC,MAAAA,GAAG,EAAG;AAFC,KAAD,EAGL;AACDN,MAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADH;AAEDC,MAAAA,GAAG,EAAG;AAFL,KAHK,EAMN;AACAN,MAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADJ;AAEAC,MAAAA,GAAG,EAAE;AAFL,KANM,CAPE;AAiBVC,IAAAA,QAAQ,EAAE,CAAC;AACTP,MAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADK;AAETJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADA;AAEJH,QAAAA,QAAQ,EAAE;AAFN,OAFG;AAMTC,MAAAA,OAAO,EAAE;AANA,KAAD,EAOP;AACDF,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADA;AAEJH,QAAAA,QAAQ,EAAE;AAFN,OADL;AAKDC,MAAAA,OAAO,EAAE;AALR,KAPO;AAjBA,GAAD,CADe;AAiC1BK,EAAAA,UAAU,EAAE,EAjCc;AAkC1BC,EAAAA,gBAAgB,EAAE,KAlCQ;AAmC1BC,EAAAA,aAAa,EAAE,KAnCW;AAoC1BC,EAAAA,cAAc,EAAE,IApCU;AAsC1BC,EAAAA,cAAc,EAAE,KAtCU;AAuC1BC,EAAAA,WAAW,EAAE,KAvCa;AAwC1BC,EAAAA,YAAY,EAAE,IAxCY;AA0C1BC,EAAAA,iBAAiB,EAAE,KA1CO;AA2C1BC,EAAAA,cAAc,EAAE,KA3CU;AA4C1BC,EAAAA,eAAe,EAAE,IA5CS;AA8C1BC,EAAAA,iBAAiB,EAAE,KA9CO;AA+C1BC,EAAAA,cAAc,EAAE,KA/CU;AAgD1BC,EAAAA,eAAe,EAAE;AAhDS,CAArB;AAmDP,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAC/BC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAGC,CAAH,MAAU;AACjC3B,EAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EAD8B;AAEjCJ,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADA;AAEJH,IAAAA,QAAQ,EAAEL,KAAK,CAAC+B,IAAN,CAAWC,QAAX;AAFN,GAF2B;AAMjC1B,EAAAA,OAAO,EAAEN,KAAK,CAACiC,KAAN,CAAYC,SAAZ,EANwB;AAOjC3B,EAAAA,MAAM,EAAE,CAAC;AACPE,IAAAA,GAAG,EAAET,KAAK,CAACmC,KAAN,CAAYA,KAAZ;AADE,GAAD,CAPyB;AAUjCC,EAAAA,OAAO,EAAE,CAAC;AACRhC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADC;AAEJH,MAAAA,QAAQ,EAACL,KAAK,CAAC+B,IAAN,CAAWC,QAAX;AAFL,KADE;AAKR1B,IAAAA,OAAO,EAAEN,KAAK,CAACiC,KAAN,CAAYI,QAAZ;AALD,GAAD;AAVwB,CAAV,CAAzB,CADK;AAoBLpC,YAAY,CAACC,SAAb,GAAyBD,YAAY,CAACC,SAAb,CAAuBoC,MAAvB,CAA8Bd,iBAAiB,CAAC,EAAD,CAA/C,CAAzB;AAEF,OAAO,MAAMe,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEX,gBAD0B;AAEhCU,EAAAA;AAFgC,CAAX,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEL,mBAD6B;AAEnCI,EAAAA;AAFmC,CAAX,CAAnB;;AAKP,MAAMG,SAAS,GAAIH,IAAD,KAAY;AAC5BjD,EAAAA,EAAE,EAAEiD,IAAI,CAACjD,EADmB;AAE5BG,EAAAA,OAAO,EAAE8C,IAAI,CAAC9C,OAFc;AAG5BF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAC,CADC;AAEJE,IAAAA,QAAQ,EAAC;AAFL,GAHsB;AAO5BE,EAAAA,MAAM,EAAE,CAAC;AACPE,IAAAA,GAAG,EAAE;AADE,GAAD,CAPoB;AAU5BC,EAAAA,QAAQ,EAAE;AAVkB,CAAZ,CAAlB;;AAaA,MAAM8C,YAAY,GAAIJ,IAAD,KAAW;AAC9BjD,EAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EAD2B;AAE9BF,EAAAA,OAAO,EAAE8C,IAFqB;AAG9BhD,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAC;AAFL;AAHwB,CAAX,CAArB,C,CASA;;;AACA,MAAMoD,OAAO,GAAG,CAACC,KAAK,GAAGzD,YAAT,EAAsB0D,MAAtB,KAAiC5D,OAAO,CAAC2D,KAAD,EAASE,KAAD,IAAW;AACvE,UAAOD,MAAM,CAACN,IAAd;AACE,SAAKd,kBAAL;AACEqB,MAAAA,KAAK,CAAChD,gBAAN,GAAuB,IAAvB;AACAgD,MAAAA,KAAK,CAAC/C,aAAN,GAAoB,KAApB;AACA+C,MAAAA,KAAK,CAAC9C,cAAN,GAAqB,IAArB;AACA;;AACF,SAAK0B,kBAAL;AACEoB,MAAAA,KAAK,CAAC1D,SAAN,CAAgB2D,OAAhB,CAAwBN,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;AACAQ,MAAAA,KAAK,CAAChD,gBAAN,GAAuB,KAAvB;AACAgD,MAAAA,KAAK,CAAC/C,aAAN,GAAoB,IAApB;AACA+C,MAAAA,KAAK,CAAC9C,cAAN,GAAqB,IAArB;AACA;;AACF,SAAK2B,kBAAL;AACEmB,MAAAA,KAAK,CAAChD,gBAAN,GAAuB,KAAvB;AACAgD,MAAAA,KAAK,CAAC9C,cAAN,GAAqB6C,MAAM,CAACG,KAA5B;AACA;;AAEF,SAAKpB,gBAAL;AACEkB,MAAAA,KAAK,CAAC7C,cAAN,GAAqB,IAArB;AACA6C,MAAAA,KAAK,CAAC5C,WAAN,GAAkB,KAAlB;AACA4C,MAAAA,KAAK,CAAC3C,YAAN,GAAmB,IAAnB;AACA;;AACF,SAAK0B,gBAAL;AACEiB,MAAAA,KAAK,CAAC1D,SAAN,CAAgB2D,OAAhB,CAAwBN,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;AACAQ,MAAAA,KAAK,CAAC7C,cAAN,GAAqB,KAArB;AACA6C,MAAAA,KAAK,CAAC5C,WAAN,GAAkB,IAAlB;AACA4C,MAAAA,KAAK,CAAC3C,YAAN,GAAmB,IAAnB;AACA;;AACF,SAAK2B,gBAAL;AACEgB,MAAAA,KAAK,CAAC7C,cAAN,GAAqB,KAArB;AACA6C,MAAAA,KAAK,CAAC3C,YAAN,GAAmB0C,MAAM,CAACG,KAA1B;AACA;;AAEF,SAAKjB,mBAAL;AACEe,MAAAA,KAAK,CAAC1C,iBAAN,GAAwB,IAAxB;AACA0C,MAAAA,KAAK,CAACzC,cAAN,GAAqB,KAArB;AACAyC,MAAAA,KAAK,CAACxC,eAAN,GAAsB,IAAtB;AACA;;AACF,SAAK0B,mBAAL;AACEc,MAAAA,KAAK,CAAC1D,SAAN,GAAiB0D,KAAK,CAAC1D,SAAN,CAAgB6D,MAAhB,CAAwBlC,CAAD,IAAMA,CAAC,CAAC1B,EAAF,KAASwD,MAAM,CAACP,IAA7C,CAAjB;AACAQ,MAAAA,KAAK,CAAC1C,iBAAN,GAAwB,KAAxB;AACA0C,MAAAA,KAAK,CAACzC,cAAN,GAAqB,IAArB;AACAyC,MAAAA,KAAK,CAACxC,eAAN,GAAsB,IAAtB;AACA;;AACF,SAAK2B,mBAAL;AACEa,MAAAA,KAAK,CAAC1C,iBAAN,GAAwB,KAAxB;AACA0C,MAAAA,KAAK,CAACxC,eAAN,GAAsBuC,MAAM,CAACG,KAA7B;AACA;;AAEF,SAAKd,mBAAL;AACEY,MAAAA,KAAK,CAACvC,iBAAN,GAAwB,IAAxB;AACAuC,MAAAA,KAAK,CAACtC,cAAN,GAAqB,KAArB;AACA;;AACF,SAAK2B,mBAAL;AAA0B;AACxB,cAAMe,IAAI,GAAGJ,KAAK,CAAC1D,SAAN,CAAgB+D,IAAhB,CAAsBpC,CAAD,IAAOA,CAAC,CAAC1B,EAAF,KAASwD,MAAM,CAACP,IAAP,CAAYc,MAAjD,CAAb;AACAF,QAAAA,IAAI,CAACtD,QAAL,CAAcmD,OAAd,CAAsBL,YAAY,CAACG,MAAM,CAACP,IAAP,CAAY9C,OAAb,CAAlC,EAFwB,CAEoC;;AAC5DsD,QAAAA,KAAK,CAACvC,iBAAN,GAAwB,KAAxB;AACAuC,QAAAA,KAAK,CAACtC,cAAN,GAAqB,IAArB;AACAsC,QAAAA,KAAK,CAACrC,eAAN,GAAsB,IAAtB;AACA;AACD;;AACD,SAAK2B,mBAAL;AACEU,MAAAA,KAAK,CAACvC,iBAAN,GAAwB,KAAxB;AACAuC,MAAAA,KAAK,CAACrC,eAAN,GAAsBoC,MAAM,CAACG,KAA7B;AACA;;AACF;AACE;AAlEJ;AAoED,CArEqD,CAAxD;;AAwEA,eAAeL,OAAf","sourcesContent":["import shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME } from \"./user\";\r\nimport produce from 'immer';\r\nimport faker from '@withshepherd/faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [{\r\n    id:1,\r\n    User: {\r\n      id:1,\r\n      nickname: '김진성'\r\n    },\r\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    Images: [{\r\n      id: shortid.generate(),\r\n      src:  'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    }, {\r\n      id: shortid.generate(),\r\n      src : 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    },{\r\n      id: shortid.generate(),\r\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    }],\r\n    Comments: [{\r\n      id: shortid.generate(),\r\n      User: {\r\n        id: shortid.generate(),\r\n        nickname: 'nero',\r\n      },\r\n      content: '우와 개정판이 나왔군요~'\r\n    }, {\r\n      User: {\r\n        id: shortid.generate(),\r\n        nickname: 'hero'\r\n      },\r\n      content: '얼른 사고싶어요'\r\n    }]\r\n  }],\r\n  imagePaths: [],\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n}\r\n\r\nexport const generateDummyPost = (number) => \r\n  Array(number).fill().map((v,i) => ({\r\n    id:shortid.generate(),\r\n    User: {\r\n      id: shortid.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n      src: faker.image.image(),\r\n    }],\r\n    Comment: [{\r\n      User: {\r\n        id:shortid.generate(),\r\n        nickname:faker.name.findName(),\r\n      }, \r\n      content: faker.lorem.sentence(),\r\n    }],\r\n  }))\r\n\r\n  initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\"; \r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n})\r\n\r\nconst dummyPost = (data) =>  ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id:1,\r\n    nickname:'김진성2'\r\n  },\r\n  Images: [{\r\n    src: null\r\n  }],\r\n  Comments: [],\r\n}) \r\n\r\nconst dummyComment = (data) => ({\r\n  id:shortid.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname:'김진성2'\r\n  },\r\n})\r\n\r\n// reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState,action) => produce(state, (draft) => {\r\n    switch(action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading=true;\r\n        draft.loadPostsDone=false;\r\n        draft.loadPostsError=null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsDone=true;\r\n        draft.loadPostsError=null;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsError=action.error\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading=true;\r\n        draft.addPostDone=false;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.addPostLoading=false;\r\n        draft.addPostDone=true;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading=false;\r\n        draft.addPostError=action.error\r\n        break;\r\n  \r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading=true;\r\n        draft.removePostDone=false;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts= draft.mainPosts.filter((v)=> v.id !== action.data);\r\n        draft.removePostLoading=false;\r\n        draft.removePostDone=true;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading=false;\r\n        draft.removePostError=action.error\r\n        break;\r\n  \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading=true;\r\n        draft.addCommentDone=false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);  \r\n        post.Comments.unshift(dummyComment(action.data.content));   // 게시글 글 넣어주기\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentDone=true;\r\n        draft.addCommentError=null;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError=action.error\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}