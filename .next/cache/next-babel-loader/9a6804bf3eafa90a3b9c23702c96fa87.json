{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result =  yield call(logiInAPI);\n    console.log(action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    // const result =  yield call(addCommentAPI);\n    console.log(action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/src/sagas/post.js"],"names":["axios","all","fork","call","put","takeEvery","takeLatest","delay","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","addCommentAPI","postId","addPost","action","console","log","id","generate","type","content","err","response","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDC,KAAtD,QAAkE,oBAAlE;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACEC,gBADF,EACoBC,gBADpB,EACsCC,gBADtC,EAEEC,mBAFF,EAEuBC,mBAFvB,EAE4CC,mBAF5C,QAGO,kBAHP;AAIA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOjB,KAAK,CAACkB,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,SAASE,aAAT,CAAuBF,IAAvB,EAA6B;AAC3B,SAAOjB,KAAK,CAACkB,IAAN,CAAY,aAAYD,IAAI,CAACG,MAAO,UAApC,EAA+CH,IAA/C,CAAP;AACD;;AAED,UAAUI,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACL,IAAnB;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMkB,EAAE,GAAGjB,OAAO,CAACkB,QAAR,EAAX;AACA,UAAMtB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEjB,gBADE;AAERO,MAAAA,IAAI,EAAE;AACJQ,QAAAA,EADI;AAEJG,QAAAA,OAAO,EAAEN,MAAM,CAACL;AAFZ;AAFE,KAAD,CAAT;AAOA,UAAMb,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEZ,cADE;AAERE,MAAAA,IAAI,EAACQ;AAFG,KAAD,CAAT;AAID,GAhBD,CAgBE,OAAOI,GAAP,EAAY;AACZ,UAAMzB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEhB,gBADE;AAERM,MAAAA,IAAI,EAAGY,GAAG,CAACC,QAAJ,CAAab;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUc,UAAV,CAAqBT,MAArB,EAA6B;AAC3B,MAAI;AACF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACL,IAAnB;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEd,mBADE;AAERI,MAAAA,IAAI,EAACK,MAAM,CAACL;AAFJ,KAAD,CAAT;AAID,GARD,CAQE,OAAOY,GAAP,EAAY;AACZ,UAAMzB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEb,mBADE;AAERG,MAAAA,IAAI,EAAGY,GAAG,CAACC,QAAJ,CAAab;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUe,YAAV,GAAyB;AACvB,QAAM1B,UAAU,CAACG,gBAAD,EAAmBY,OAAnB,CAAhB;AACD;;AAED,UAAUY,eAAV,GAA4B;AAC1B,QAAM3B,UAAU,CAACM,mBAAD,EAAsBmB,UAAtB,CAAhB;AACD;;AAGD,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CACRC,IAAI,CAAC8B,YAAD,CADI,EAER9B,IAAI,CAAC+B,eAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import axios from 'axios';\r\nimport { all ,fork, call, put, takeEvery, takeLatest, delay} from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport { \r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result =  yield call(logiInAPI);\r\n    console.log(action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({       \r\n      type: ADD_POST_SUCCESS, \r\n      data: {\r\n        id,\r\n        content: action.data\r\n      }\r\n    })\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data:id,\r\n    }) \r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data : err.response.data\r\n    })\r\n  }  \r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result =  yield call(addCommentAPI);\r\n    console.log(action.data);\r\n    yield delay(1000);\r\n    yield put({       \r\n      type: ADD_COMMENT_SUCCESS, \r\n      data:action.data\r\n    }) \r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data : err.response.data\r\n    })\r\n  }  \r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment)\r\n  ])\r\n}"]},"metadata":{},"sourceType":"module"}