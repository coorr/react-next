{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortid from \"shortid\";\nimport { ADD_POST_TO_ME } from \"./user\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '김진성'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '김진성2'\n  },\n  Images: [{\n    src: null\n  }],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '김진성2'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true,\n        addPostError: null\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPosts.filter(v => v.id === action.data),\n        removePostLoading: false,\n        removePostDone: true,\n        removePostError: null\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        console.log(action.data);\n        state.mainPosts.findIndex(a => console.log(a.id));\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        console.log(postIndex);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        console.log(post);\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        console.log(mainPosts);\n        mainPosts[postIndex] = post;\n        console.log(mainPosts);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true,\n          addCommentError: null\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/src/reducers/post.js"],"names":["shortid","ADD_POST_TO_ME","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","filter","v","console","log","findIndex","a","postIndex","postId","post"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME } from \"./user\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [{\r\n    id:1,\r\n    User: {\r\n      id:1,\r\n      nickname: '김진성'\r\n    },\r\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    Images: [{\r\n      id: shortid.generate(),\r\n      src:  'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    }, {\r\n      id: shortid.generate(),\r\n      src : 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    },{\r\n      id: shortid.generate(),\r\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    }],\r\n    Comments: [{\r\n      id: shortid.generate(),\r\n      User: {\r\n        id: shortid.generate(),\r\n        nickname: 'nero',\r\n      },\r\n      content: '우와 개정판이 나왔군요~'\r\n    }, {\r\n      User: {\r\n        id: shortid.generate(),\r\n        nickname: 'hero'\r\n      },\r\n      content: '얼른 사고싶어요'\r\n    }]\r\n  }],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n}\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n})\r\n\r\nconst dummyPost = (data) =>  ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id:1,\r\n    nickname:'김진성2'\r\n  },\r\n  Images: [{\r\n    src: null\r\n  }],\r\n  Comments: [],\r\n}) \r\n\r\nconst dummyComment = (data) => ({\r\n  id:shortid.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname:'김진성2'\r\n  },\r\n})\r\n\r\nconst reducer = (state = initialState,action) => {\r\n  switch(action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading:true,\r\n        addPostDone:false,\r\n        addPostError:null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n        return {\r\n          ...state,\r\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n          addPostLoading:false,\r\n          addPostDone:true,\r\n          addPostError:null,\r\n        }\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading:false,\r\n        addPostError:action.error\r\n      }\r\n\r\n    case REMOVE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        removePostLoading:true,\r\n        removePostDone:false,\r\n        removePostError:null,\r\n      };\r\n    case REMOVE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        mainPosts: state.mainPosts.filter((v)=> v.id === action.data),\r\n        removePostLoading:false,\r\n        removePostDone:true,\r\n        removePostError:null,\r\n       }\r\n    case REMOVE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        removePostLoading:false,\r\n        removePostError:action.error\r\n      }\r\n\r\n    case ADD_COMMENT_REQUEST:\r\n        return {\r\n          ...state,\r\n          addCommentLoading:true,\r\n          addCommentDone:false,\r\n        };\r\n    case ADD_COMMENT_SUCCESS: {\r\n      console.log(action.data);\r\n      state.mainPosts.findIndex((a)=> console.log(a.id))\r\n      const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      console.log(postIndex);\r\n      const post = {...state.mainPosts[postIndex]};\r\n      console.log(post);\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const mainPosts = [...state.mainPosts];\r\n      console.log(mainPosts);\r\n      mainPosts[postIndex] = post;\r\n      console.log(mainPosts);\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n        addCommentLoading:false,\r\n        addCommentDone:true,\r\n        addCommentError:null,\r\n      }\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading:false,\r\n        addCommentError:action.error\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}