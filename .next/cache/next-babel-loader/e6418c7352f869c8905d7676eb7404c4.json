{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_SUCCESS, FOLLOW_FAILURE, FOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logOutAPI(data) {\n  return axios.post(\"/api/logOut\", data);\n}\n\nfunction signUpAPI(data) {\n  return axios.post(\"/api/signUp\", data);\n}\n\nfunction followAPI(data) {\n  return axios.post(\"/api/followAPI\", data);\n}\n\nfunction unfollowAPI(data) {\n  return axios.post(\"/api/unfollowAPI\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result =  yield call(logInAPI);\n    yield delay(1000);\n    yield put({\n      // action을 dispatch 하는 느낌의 put\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    // const result =  yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      // action을 dispatch 하는 느낌의 put\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* signUp(action) {\n  try {\n    // const result =  yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      // action을 dispatch 하는 느낌의 put\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSage() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/src/sagas/user.js"],"names":["axios","all","fork","takeLatest","delay","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_SUCCESS","FOLLOW_FAILURE","FOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","logInAPI","data","post","logOutAPI","signUpAPI","followAPI","unfollowAPI","logIn","action","type","err","response","logOut","signUp","follow","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSage"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\r\nimport { \r\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \r\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, \r\n  FOLLOW_SUCCESS, FOLLOW_FAILURE, FOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data)\r\n}\r\n\r\nfunction logOutAPI(data) {\r\n  return axios.post(\"/api/logOut\", data)\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/api/signUp\", data)\r\n}\r\n\r\nfunction followAPI(data) {\r\n  return axios.post(\"/api/followAPI\", data)\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n  return axios.post(\"/api/unfollowAPI\", data)\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result =  yield call(logInAPI);\r\n    yield delay(1000);\r\n    yield put({       // action을 dispatch 하는 느낌의 put\r\n      type: LOG_IN_SUCCESS, \r\n      data: action.data\r\n    }) \r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data : err.response.data\r\n    })\r\n  }  \r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result =  yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({       // action을 dispatch 하는 느낌의 put\r\n      type: LOG_OUT_SUCCESS, \r\n    }) \r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      data : err.response.data\r\n    })\r\n  }  \r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    // const result =  yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({       // action을 dispatch 하는 느낌의 put\r\n      type: SIGN_UP_SUCCESS, \r\n      data: action.data\r\n    }) \r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      data : err.response.data\r\n    })\r\n  }  \r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({       \r\n      type: FOLLOW_SUCCESS, \r\n      data: action.data\r\n    }) \r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      data : err.response.data\r\n    })\r\n  }  \r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({       \r\n      type: UNFOLLOW_SUCCESS, \r\n      data: action.data\r\n    }) \r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      data : err.response.data\r\n    })\r\n  }  \r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\n\r\nexport default function* userSage() {\r\n  yield all([\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ])\r\n}"]},"metadata":{},"sourceType":"module"}