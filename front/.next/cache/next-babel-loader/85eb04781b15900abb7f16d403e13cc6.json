{"ast":null,"code":"import shortid from \"shortid\";\nimport { ADD_POST_TO_ME } from \"./user\";\nimport produce from 'immer';\nimport faker from '@withshepherd/faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const REMOVE_REQUEST = 'REMOVE_REQUEST';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, draft => {\n    switch (action.type) {\n      case REMOVE_REQUEST:\n        draft.imagePaths = draft.imagePaths((v, i) => i !== action.data);\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = null;\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data); // 게시글 글 넣어주기\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          draft.addCommentError = null;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/front/src/reducers/post.js"],"names":["shortid","ADD_POST_TO_ME","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_REQUEST","addPost","data","type","addComment","reducer","state","action","draft","v","i","error","post","find","id","PostId","Likers","push","UserId","filter","concat","length","unshift","Comments"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME } from \"./user\";\r\nimport produce from 'immer';\r\nimport faker from '@withshepherd/faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n}\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\"; \r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\"; \r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\"; \r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const REMOVE_REQUEST  = 'REMOVE_REQUEST';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n})\r\n\r\n// reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState,action) => produce(state, (draft) => {\r\n    switch(action.type) {\r\n      case REMOVE_REQUEST:\r\n        draft.imagePaths= draft.imagePaths((v,i) => i !== action.data )\r\n        break;\r\n\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading=true;\r\n        draft.uploadImagesDone=false;\r\n        draft.uploadImagesError=null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS:\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading=false;\r\n        draft.uploadImagesDone=true;\r\n        break;\r\n      case UPLOAD_IMAGES_FAILURE: \r\n        draft.uploadImagesLoading=false;\r\n        draft.uploadImagesError=action.error\r\n        break;\r\n      \r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading=true;\r\n        draft.likePostDone=false;\r\n        draft.likePostError=null;\r\n        break;\r\n      case LIKE_POST_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId)\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading=false;\r\n        draft.likePostDone=true;\r\n        break;\r\n      case LIKE_POST_FAILURE: \r\n        draft.likePostLoading=false;\r\n        draft.likePostError=action.error\r\n        break;\r\n      \r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading=true;\r\n        draft.unlikePostDone=false;\r\n        draft.unlikePostError=null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId); \r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostDone=true;\r\n        break;\r\n      }\r\n        \r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostError=action.error\r\n        break;\r\n\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading=true;\r\n        draft.loadPostsDone=false;\r\n        draft.loadPostsError=null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsDone=true;\r\n        draft.loadPostsError=null;\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsError=action.error\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading=true;\r\n        draft.addPostDone=false;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.addPostLoading=false;\r\n        draft.addPostDone=true;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading=false;\r\n        draft.addPostError=action.error\r\n        break;\r\n  \r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading=true;\r\n        draft.removePostDone=false;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts= draft.mainPosts.filter((v)=> v.id !== action.data.PostId);\r\n        draft.removePostLoading=false;\r\n        draft.removePostDone=true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading=false;\r\n        draft.removePostError=action.error\r\n        break;\r\n  \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading=true;\r\n        draft.addCommentDone=false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);  \r\n        post.Comments.unshift(action.data);   // 게시글 글 넣어주기\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentDone=true;\r\n        draft.addCommentError=null;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError=action.error\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}