{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from '../../components/AppLayout';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const {\n    userInfo,\n    me\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 200) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            data: id\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [userInfo && /*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:title\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:description\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:image\",\n        content: \"https://nodebird.com/favicon.ico\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:url\",\n        content: `https://nodebird.com/user/${id}`\n      })]\n    }), userInfo && userInfo.id !== (me === null || me === void 0 ? void 0 : me.id) ? /*#__PURE__*/_jsx(Card, {\n      style: {\n        marginBottom: 20\n      },\n      actions: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [\"\\uC9F9\\uC9F9\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Posts]\n      }, \"twit\"), /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"\\uD314\\uB85C\\uC789\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Followings]\n      }, \"following\"), /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"\\uD314\\uB85C\\uC6CC\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Followers]\n      }, \"follower\")],\n      children: /*#__PURE__*/_jsx(Card.Meta, {\n        avatar: /*#__PURE__*/_jsx(Avatar, {\n          children: userInfo.nickname[0]\n        }),\n        title: userInfo.nickname\n      })\n    }) : null, mainPosts.map(c => /*#__PURE__*/_jsx(PostCard, {\n      post: c\n    }, c.id))]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default User;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/front/src/pages/user/[id].js"],"names":["React","useEffect","useDispatch","useSelector","Avatar","Card","END","Head","useRouter","axios","LOAD_USER_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","LOAD_USER_REQUEST","PostCard","wrapper","AppLayout","User","dispatch","router","id","query","mainPosts","hasMorePosts","loadPostsLoading","state","post","userInfo","me","user","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","data","addEventListener","removeEventListener","nickname","marginBottom","Posts","Followings","Followers","map","c","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","params","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { END } from 'redux-saga';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\n\r\nimport axios from 'axios';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\r\nimport PostCard from '../../components/PostCard';\r\nimport wrapper from '../../store/configureStore';\r\nimport AppLayout from '../../components/AppLayout';\r\n\r\nconst User = () => {\r\n  const dispatch = useDispatch();\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n  const { userInfo, me } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    const onScroll = () => {\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight- 200) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          dispatch({\r\n            type: LOAD_USER_POSTS_REQUEST,\r\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n            data: id,\r\n          });\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\r\n\r\n\r\n  return (\r\n    <AppLayout>\r\n      {userInfo && (\r\n        <Head>\r\n          <title>\r\n            {userInfo.nickname}\r\n            님의 글\r\n          </title>\r\n          <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\r\n          <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\r\n          <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\r\n          <meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\r\n          <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\r\n        </Head>\r\n      )}\r\n      {userInfo && (userInfo.id !== me?.id)\r\n        ? (\r\n          <Card\r\n            style={{ marginBottom: 20 }}\r\n            actions={[\r\n              <div key=\"twit\">\r\n                짹짹\r\n                <br />\r\n                {userInfo.Posts}\r\n              </div>,\r\n              <div key=\"following\">\r\n                팔로잉\r\n                <br />\r\n                {userInfo.Followings}\r\n              </div>,\r\n              <div key=\"follower\">\r\n                팔로워\r\n                <br />\r\n                {userInfo.Followers}\r\n              </div>,\r\n            ]}\r\n          >\r\n            <Card.Meta\r\n              avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n              title={userInfo.nickname}\r\n            />\r\n          </Card>\r\n        )\r\n        : null}\r\n      {mainPosts.map((c) => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_USER_POSTS_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_USER_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}