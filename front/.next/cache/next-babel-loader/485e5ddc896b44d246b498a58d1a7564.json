{"ast":null,"code":"import shortid from \"shortid\";\nimport { ADD_POST_TO_ME } from \"./user\";\nimport produce from 'immer';\nimport faker from '@withshepherd/faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, draft => {\n    switch (action.type) {\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n\n      case LIKE_POST_FAILURE:\n        {\n          draft.likePostLoading = false;\n          draft.likePostError = action.error;\n          break;\n        }\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = null;\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data); // 게시글 글 넣어주기\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          draft.addCommentError = null;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/front/src/reducers/post.js"],"names":["shortid","ADD_POST_TO_ME","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","post","find","v","id","PostId","Likers","push","UserId","error","filter","concat","length","unshift","Comments"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME } from \"./user\";\r\nimport produce from 'immer';\r\nimport faker from '@withshepherd/faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n}\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\"; \r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\"; \r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\"; \r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n})\r\n\r\n// reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState,action) => produce(state, (draft) => {\r\n    switch(action.type) {\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading=true;\r\n        draft.likePostDone=false;\r\n        draft.likePostError=null;\r\n        break;\r\n      case LIKE_POST_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId)\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading=false;\r\n        draft.likePostDone=true;\r\n        break;\r\n      case LIKE_POST_FAILURE: {\r\n        draft.likePostLoading=false;\r\n        draft.likePostError=action.error\r\n        break;\r\n      }\r\n        \r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading=true;\r\n        draft.unlikePostDone=false;\r\n        draft.unlikePostError=null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId); \r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostDone=true;\r\n        break;\r\n      }\r\n        \r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostError=action.error\r\n        break;\r\n\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading=true;\r\n        draft.loadPostsDone=false;\r\n        draft.loadPostsError=null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsDone=true;\r\n        draft.loadPostsError=null;\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsError=action.error\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading=true;\r\n        draft.addPostDone=false;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.addPostLoading=false;\r\n        draft.addPostDone=true;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading=false;\r\n        draft.addPostError=action.error\r\n        break;\r\n  \r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading=true;\r\n        draft.removePostDone=false;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts= draft.mainPosts.filter((v)=> v.id !== action.data);\r\n        draft.removePostLoading=false;\r\n        draft.removePostDone=true;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading=false;\r\n        draft.removePostError=action.error\r\n        break;\r\n  \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading=true;\r\n        draft.addCommentDone=false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);  \r\n        post.Comments.unshift(action.data);   // 게시글 글 넣어주기\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentDone=true;\r\n        draft.addCommentError=null;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError=action.error\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}