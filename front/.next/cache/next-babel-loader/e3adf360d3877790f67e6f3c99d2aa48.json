{"ast":null,"code":"import shortid from \"shortid\";\nimport { ADD_POST_TO_ME } from \"./user\";\nimport produce from 'immer';\nimport faker from '@withshepherd/faker';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '김진성'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요'\n    }]\n  }],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comment: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = null;\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data.content); // 게시글 글 넣어주기\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          draft.addCommentError = null;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/front/src/reducers/post.js"],"names":["shortid","ADD_POST_TO_ME","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","v","i","name","findName","lorem","paragraph","image","Comment","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","post","find","PostId"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME } from \"./user\";\r\nimport produce from 'immer';\r\nimport faker from '@withshepherd/faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [{\r\n    id:1,\r\n    User: {\r\n      id:1,\r\n      nickname: '김진성'\r\n    },\r\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    Images: [{\r\n      id: shortid.generate(),\r\n      src:  'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    }, {\r\n      id: shortid.generate(),\r\n      src : 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    },{\r\n      id: shortid.generate(),\r\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\r\n    }],\r\n    Comments: [{\r\n      id: shortid.generate(),\r\n      User: {\r\n        id: shortid.generate(),\r\n        nickname: 'nero',\r\n      },\r\n      content: '우와 개정판이 나왔군요~'\r\n    }, {\r\n      User: {\r\n        id: shortid.generate(),\r\n        nickname: 'hero'\r\n      },\r\n      content: '얼른 사고싶어요'\r\n    }]\r\n  }],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n}\r\n\r\nexport const generateDummyPost = (number) => \r\n  Array(number).fill().map((v,i) => ({\r\n    id:shortid.generate(),\r\n    User: {\r\n      id: shortid.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n      src: faker.image.image(),\r\n    }],\r\n    Comment: [{\r\n      User: {\r\n        id:shortid.generate(),\r\n        nickname:faker.name.findName(),\r\n      }, \r\n      content: faker.lorem.sentence(),\r\n    }],\r\n  }))\r\n\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\"; \r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n})\r\n\r\n// reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState,action) => produce(state, (draft) => {\r\n    switch(action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading=true;\r\n        draft.loadPostsDone=false;\r\n        draft.loadPostsError=null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsDone=true;\r\n        draft.loadPostsError=null;\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsError=action.error\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading=true;\r\n        draft.addPostDone=false;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.addPostLoading=false;\r\n        draft.addPostDone=true;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading=false;\r\n        draft.addPostError=action.error\r\n        break;\r\n  \r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading=true;\r\n        draft.removePostDone=false;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts= draft.mainPosts.filter((v)=> v.id !== action.data);\r\n        draft.removePostLoading=false;\r\n        draft.removePostDone=true;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading=false;\r\n        draft.removePostError=action.error\r\n        break;\r\n  \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading=true;\r\n        draft.addCommentDone=false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);  \r\n        post.Comments.unshift(action.data.content);   // 게시글 글 넣어주기\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentDone=true;\r\n        draft.addCommentError=null;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError=action.error\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}