{"ast":null,"code":"import shortid from \"shortid\";\nimport { ADD_POST_TO_ME } from \"./user\";\nimport produce from 'immer';\nimport faker from '@withshepherd/faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  singlePost: null\n};\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\";\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_REQUEST = 'REMOVE_REQUEST';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_REQUEST:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Likers.push({\n        id: action.data.UserId\n      });\n      draft.likePostLoading = false;\n      draft.likePostDone = true;\n      break;\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePost = action.data.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = null;\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data); // 게시글 글 넣어주기\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/front/src/reducers/post.js"],"names":["shortid","ADD_POST_TO_ME","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","singlePost","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_REQUEST","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","concat","length","Comments"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME } from \"./user\";\r\nimport produce from 'immer';\r\nimport faker from '@withshepherd/faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n\r\n  singlePost:null,\r\n}\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\"; \r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\"; \r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\"; \r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\"; \r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\r\n\r\nexport const REMOVE_REQUEST  = 'REMOVE_REQUEST';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n})\r\n\r\n// reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState,action) => produce(state, (draft) => {\r\n    switch(action.type) {\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading=true;\r\n        draft.retweetDone=false;\r\n        draft.retweetError=null;\r\n        break;\r\n      case RETWEET_SUCCESS:\r\n        draft.retweetLoading=false;\r\n        draft.retweetDone=true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      case RETWEET_FAILURE: \r\n        draft.retweetLoading=false;\r\n        draft.retweetError=action.error\r\n        break;\r\n\r\n      case REMOVE_REQUEST:\r\n        draft.imagePaths= draft.imagePaths.filter((v,i) => i !== action.data )\r\n        break;\r\n\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading=true;\r\n        draft.uploadImagesDone=false;\r\n        draft.uploadImagesError=null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS:\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading=false;\r\n        draft.uploadImagesDone=true;\r\n        break;\r\n      case UPLOAD_IMAGES_FAILURE: \r\n        draft.uploadImagesLoading=false;\r\n        draft.uploadImagesError=action.error\r\n        break;\r\n      \r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading=true;\r\n        draft.likePostDone=false;\r\n        draft.likePostError=null;\r\n        break;\r\n      case LIKE_POST_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId)\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading=false;\r\n        draft.likePostDone=true;\r\n        break;\r\n      case LIKE_POST_FAILURE: \r\n        draft.likePostLoading=false;\r\n        draft.likePostError=action.error\r\n        break;\r\n      \r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading=true;\r\n        draft.unlikePostDone=false;\r\n        draft.unlikePostError=null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId); \r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostDone=true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostError=action.error\r\n        break;\r\n\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading=true;\r\n        draft.loadPostDone=false;\r\n        draft.loadPostError=null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.loadPostLoading=false;\r\n        draft.loadPostDone=true;\r\n        draft.singlePost = action.data;\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading=false;\r\n        draft.loadPostError=action.error\r\n        break;\r\n\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading=true;\r\n        draft.loadPostsDone=false;\r\n        draft.loadPostsError=null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsDone=true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        draft.hasMorePost = action.data.length === 10;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsError=action.error\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading=true;\r\n        draft.addPostDone=false;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.addPostLoading=false;\r\n        draft.addPostDone=true;\r\n        draft.addPostError=null;\r\n        draft.imagePaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading=false;\r\n        draft.addPostError=action.error\r\n        break;\r\n  \r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading=true;\r\n        draft.removePostDone=false;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts= draft.mainPosts.filter((v)=> v.id !== action.data.PostId);\r\n        draft.removePostLoading=false;\r\n        draft.removePostDone=true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading=false;\r\n        draft.removePostError=action.error\r\n        break;\r\n  \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading=true;\r\n        draft.addCommentDone=false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);  \r\n        post.Comments.unshift(action.data);   // 게시글 글 넣어주기\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentDone=true;\r\n        draft.addCommentError=null;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError=action.error\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}