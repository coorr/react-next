{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport createSagaMiddleware from '@redux-saga/core';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) // 빌드용\n  : composeWithDevTools(applyMiddleware(...middlewares)); // 개발용\n\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // saga 기능\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/src/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","reducer","rootSaga","createSagaMiddleware","loggerMiddleware","dispatch","getState","next","action","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACzE,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAFD;;AAIA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AACA,QAAMQ,WAAW,GAAG,CAACD,cAAD,EAAgBN,gBAAhB,CAApB;AACA,QAAMQ,QAAQ,GAAG,QACbd,OAAO,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CADM,CAC6B;AAD7B,IAEbX,mBAAmB,CAACH,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAFvB,CAH2B,CAK+B;;AAC1D,QAAME,KAAK,GAAGd,WAAW,CAACE,OAAD,EAAUW,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAkBJ,cAAc,CAACK,GAAf,CAAmBb,QAAnB,CAAlB,CAP2B,CAOsB;;AACjD,SAAOW,KAAP;AACD,CATD;;AAUC,MAAMG,OAAO,GAAGpB,aAAa,CAACa,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIC,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from '../reducers'\r\nimport rootSaga from '../sagas'\r\nimport createSagaMiddleware from '@redux-saga/core';\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n  return next(action);\r\n}\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware,loggerMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))  // 빌드용\r\n    : composeWithDevTools(applyMiddleware(...middlewares))  // 개발용\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask =  sagaMiddleware.run(rootSaga);  // saga 기능\r\n  return store;\r\n}\r\n const wrapper = createWrapper(configureStore, { \r\n   debug: process.env.NODE_ENV === 'development',\r\n})\r\n\r\n  export default wrapper;  "]},"metadata":{},"sourceType":"module"}