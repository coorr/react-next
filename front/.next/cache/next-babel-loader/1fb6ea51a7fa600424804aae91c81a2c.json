{"ast":null,"code":"import shortid from \"shortid\";\nimport { ADD_POST_TO_ME } from \"./user\";\nimport produce from 'immer';\nimport faker from '@withshepherd/faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_REQUEST = 'REMOVE_REQUEST';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetDone = true;\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_REQUEST:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Likers.push({\n        id: action.data.UserId\n      });\n      draft.likePostLoading = false;\n      draft.likePostDone = true;\n      break;\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.loadPostsError = null;\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = null;\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data); // 게시글 글 넣어주기\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/sysone/Desktop/react-next/front/src/reducers/post.js"],"names":["shortid","ADD_POST_TO_ME","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_REQUEST","addPost","data","type","addComment","reducer","state","action","draft","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","concat","length","unshift","Comments"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME } from \"./user\";\r\nimport produce from 'immer';\r\nimport faker from '@withshepherd/faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n}\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POSTS_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POSTS_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POSTS_FAILURE\"; \r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POSTS_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POSTS_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POSTS_FAILURE\"; \r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\"; \r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\r\n\r\nexport const REMOVE_REQUEST  = 'REMOVE_REQUEST';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n})\r\n\r\n// reducer == 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState,action) => produce(state, (draft) => {\r\n    switch(action.type) {\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading=true;\r\n        draft.retweetDone=false;\r\n        draft.retweetError=null;\r\n        break;\r\n      case RETWEET_SUCCESS:\r\n        draft.retweetLoading=false;\r\n        draft.retweetDone=true;\r\n        break;\r\n      case RETWEET_FAILURE: \r\n        draft.retweetLoading=false;\r\n        draft.retweetError=action.error\r\n        break;\r\n\r\n      case REMOVE_REQUEST:\r\n        draft.imagePaths= draft.imagePaths.filter((v,i) => i !== action.data )\r\n        break;\r\n\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading=true;\r\n        draft.uploadImagesDone=false;\r\n        draft.uploadImagesError=null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS:\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading=false;\r\n        draft.uploadImagesDone=true;\r\n        break;\r\n      case UPLOAD_IMAGES_FAILURE: \r\n        draft.uploadImagesLoading=false;\r\n        draft.uploadImagesError=action.error\r\n        break;\r\n      \r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading=true;\r\n        draft.likePostDone=false;\r\n        draft.likePostError=null;\r\n        break;\r\n      case LIKE_POST_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId)\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading=false;\r\n        draft.likePostDone=true;\r\n        break;\r\n      case LIKE_POST_FAILURE: \r\n        draft.likePostLoading=false;\r\n        draft.likePostError=action.error\r\n        break;\r\n      \r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading=true;\r\n        draft.unlikePostDone=false;\r\n        draft.unlikePostError=null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId); \r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostDone=true;\r\n        break;\r\n      }\r\n        \r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading=false;\r\n        draft.unlikePostError=action.error\r\n        break;\r\n\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading=true;\r\n        draft.loadPostsDone=false;\r\n        draft.loadPostsError=null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsDone=true;\r\n        draft.loadPostsError=null;\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading=false;\r\n        draft.loadPostsError=action.error\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading=true;\r\n        draft.addPostDone=false;\r\n        draft.addPostError=null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.addPostLoading=false;\r\n        draft.addPostDone=true;\r\n        draft.addPostError=null;\r\n        draft.imagePaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading=false;\r\n        draft.addPostError=action.error\r\n        break;\r\n  \r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading=true;\r\n        draft.removePostDone=false;\r\n        draft.removePostError=null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts= draft.mainPosts.filter((v)=> v.id !== action.data.PostId);\r\n        draft.removePostLoading=false;\r\n        draft.removePostDone=true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading=false;\r\n        draft.removePostError=action.error\r\n        break;\r\n  \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading=true;\r\n        draft.addCommentDone=false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);  \r\n        post.Comments.unshift(action.data);   // 게시글 글 넣어주기\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentDone=true;\r\n        draft.addCommentError=null;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading=false;\r\n        draft.addCommentError=action.error\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}